#include <math.h>
#include <PxMatrix.h>
#include <Adafruit_GFX.h>
#include <Ticker.h>
#include <WebSocketsServer.h>
#include <ESP8266WiFi.h>
#include <ArduinoOTA.h>
#include <WiFiUdp.h>
#include <ArduinoJson.h>
#include <WiFiClient.h>

#define ELEMENTS(x)   (sizeof(x) / sizeof(x[0]))
Ticker display_ticker;
#define P_LAT 16
#define P_A 5
#define P_B 4
#define P_C 15
#define P_D 12
#define P_E 0
#define P_OE 2

#define JSON_BUFF_DIMENSION 2500

#ifndef STASSID
#define STASSID ""
#define STAPSK  ""//put your wifi credentials here
#endif

uint16_t static d01[] = {
  0x0000, 0x0000, 0x0000, 0xFEA0, 0xFEA0, 0xFEA0, 0xFEA0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFEA0, 0xCDA6, 0xCDA6, 0xCDA6,   // 0x0010 (16) pixels
  0xCDA6, 0xFEA0, 0x0000, 0x0000, 0x0000, 0xFEA0, 0xCDA6, 0xCDA6, 0xCDA6, 0xCDA6, 0xCDA6, 0xCDA6, 0xFEA0, 0x0000, 0xFEA0, 0xCDA6,   // 0x0020 (32) pixels
  0xCDA6, 0xCDA6, 0xCDA6, 0xCDA6, 0xCDA6, 0xCDA6, 0xCDA6, 0xFEA0, 0xFEA0, 0xCDA6, 0xCDA6, 0xCDA6, 0xCDA6, 0xCDA6, 0xCDA6, 0xCDA6,   // 0x0030 (48) pixels
  0xCDA6, 0xFEA0, 0xFEA0, 0xCDA6, 0xCDA6, 0xCDA6, 0xCDA6, 0xCDA6, 0xCDA6, 0xCDA6, 0xCDA6, 0xFEA0, 0xFEA0, 0xCDA6, 0xCDA6, 0xCDA6,   // 0x0040 (64) pixels
  0xCDA6, 0xCDA6, 0xCDA6, 0xCDA6, 0xCDA6, 0xFEA0, 0x0000, 0xFEA0, 0xCDA6, 0xCDA6, 0xCDA6, 0xCDA6, 0xCDA6, 0xCDA6, 0xFEA0, 0x0000,   // 0x0050 (80) pixels
  0x0000, 0x0000, 0xFEA0, 0xCDA6, 0xCDA6, 0xCDA6, 0xCDA6, 0xFEA0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFEA0, 0xFEA0, 0xFEA0, 0xFEA0, 0x0000, 0x0000, 0x0000
};

uint16_t static n01[] = {
  0x0000, 0x0000, 0x0000, 0xFFDF, 0xFFDF, 0xFFDF, 0xFFDF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFDF, 0x7BEF, 0x7BEF, 0x7BEF,   // 0x0010 (16) pixels
  0x7BEF, 0xFFDF, 0x0000, 0x0000, 0x0000, 0xFFDF, 0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF, 0xFFDF, 0x0000, 0xFFDF, 0x7BEF,   // 0x0020 (32) pixels
  0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF, 0xFFDF, 0xFFDF, 0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF,   // 0x0030 (48) pixels
  0x7BEF, 0xFFDF, 0xFFDF, 0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF, 0xFFDF, 0xFFDF, 0x7BEF, 0x7BEF, 0x7BEF,   // 0x0040 (64) pixels
  0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF, 0xFFDF, 0x0000, 0xFFDF, 0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF, 0xFFDF, 0x0000,   // 0x0050 (80) pixels
  0x0000, 0x0000, 0xFFDF, 0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF, 0xFFDF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFDF, 0xFFDF, 0xFFDF, 0xFFDF, 0x0000, 0x0000, 0x0000
};



uint16_t static d02[] = {
  0x0000, 0x0000, 0x0000, 0xFEA0, 0xFEA0, 0xFEA0, 0xFEA0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFEA0, 0xCDA6, 0xCDA6, 0xCDA6,   // 0x0010 (16) pixels
  0xCDA6, 0xFEA0, 0x0000, 0x0000, 0x0000, 0xFEA0, 0xCDA6, 0xCDA6, 0xCDA6, 0xCDA6, 0xCDA6, 0xCDA6, 0xFEA0, 0x0000, 0xFEA0, 0xCDA6,   // 0x0020 (32) pixels
  0xCDA6, 0xFFFF, 0xFFFF, 0xCDA6, 0xCDA6, 0xCDA6, 0xCDA6, 0xFEA0, 0xFEA0, 0xCDA6, 0xFFFF, 0x8E3A, 0x8E3A, 0xFFFF, 0xFFFF, 0xCDA6,   // 0x0030 (48) pixels
  0xCDA6, 0xFEA0, 0xFEA0, 0xFFFF, 0xFFFF, 0x8E3A, 0xFFFF, 0x8E3A, 0x8E3A, 0xFFFF, 0xCDA6, 0xFEA0, 0xFFFF, 0xFFFF, 0x8E3A, 0xFFFF,   // 0x0040 (64) pixels
  0xFFFF, 0xFFFF, 0xFFFF, 0x8E3A, 0xFFFF, 0xFEA0, 0xFFFF, 0x8E3A, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x8E3A, 0xFFFF,   // 0x0050 (80) pixels
  0xFFFF, 0x8E3A, 0x8E3A, 0x8E3A, 0x8E3A, 0x8E3A, 0x8E3A, 0x8E3A, 0x8E3A, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000
};

uint16_t static n02[] = {
  0x0000, 0x0000, 0x0000, 0xBDD7, 0xBDD7, 0xBDD7, 0xBDD7, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xBDD7, 0x632C, 0x632C, 0x632C,   // 0x0010 (16) pixels
  0x632C, 0xBDD7, 0x0000, 0x0000, 0x0000, 0xBDD7, 0x632C, 0x632C, 0x632C, 0x632C, 0x632C, 0x632C, 0xBDD7, 0x0000, 0xBDD7, 0x632C,   // 0x0020 (32) pixels
  0x632C, 0xFFFF, 0xFFFF, 0x632C, 0x632C, 0x632C, 0x632C, 0xBDD7, 0xBDD7, 0x632C, 0xFFFF, 0x8E3A, 0x8E3A, 0xFFFF, 0xFFFF, 0x632C,   // 0x0030 (48) pixels
  0x632C, 0xBDD7, 0xBDD7, 0xFFFF, 0xFFFF, 0x8E3A, 0xFFFF, 0x8E3A, 0x8E3A, 0xFFFF, 0x632C, 0xBDD7, 0xFFFF, 0xFFFF, 0x8E3A, 0xFFFF,   // 0x0040 (64) pixels
  0xFFFF, 0xFFFF, 0xFFFF, 0x8E3A, 0xFFFF, 0xBDD7, 0xFFFF, 0x8E3A, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x8E3A, 0xFFFF,   // 0x0050 (80) pixels
  0xFFFF, 0x8E3A, 0x8E3A, 0x8E3A, 0x8E3A, 0x8E3A, 0x8E3A, 0x8E3A, 0x8E3A, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
};

uint16_t static d03[] = {
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0010 (16) pixels
  0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x7BEF, 0x7BEF, 0x7BEF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000,   // 0x0020 (32) pixels
  0xFFFF, 0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF,   // 0x0030 (48) pixels
  0x7BEF, 0xFFFF, 0x0000, 0xFFFF, 0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF, 0xFFFF, 0xFFFF, 0x7BEF, 0x7BEF, 0x7BEF,   // 0x0040 (64) pixels
  0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF, 0xFFFF, 0xFFFF, 0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF, 0xFFFF,   // 0x0050 (80) pixels
  0xFFFF, 0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
};

uint16_t static n03[] = {
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0010 (16) pixels
  0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x7BEF, 0x7BEF, 0x7BEF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000,   // 0x0020 (32) pixels
  0xFFFF, 0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF,   // 0x0030 (48) pixels
  0x7BEF, 0xFFFF, 0x0000, 0xFFFF, 0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF, 0xFFFF, 0xFFFF, 0x7BEF, 0x7BEF, 0x7BEF,   // 0x0040 (64) pixels
  0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF, 0xFFFF, 0xFFFF, 0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF, 0xFFFF,   // 0x0050 (80) pixels
  0xFFFF, 0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
};

uint16_t static d04[] = {
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xBDD7, 0xBDD7, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xBDD7, 0xBDD7, 0x632C,   // 0x0010 (16) pixels
  0x632C, 0xBDD7, 0x0000, 0x0000, 0x0000, 0x0000, 0xBDD7, 0x632C, 0x632C, 0x632C, 0x632C, 0x632C, 0xBDD7, 0x0000, 0xBDD7, 0xBDD7,   // 0x0020 (32) pixels
  0x632C, 0xFFFF, 0xFFFF, 0x632C, 0x632C, 0x632C, 0x632C, 0xBDD7, 0xBDD7, 0x632C, 0xFFFF, 0x8E3A, 0x8E3A, 0xFFFF, 0xFFFF, 0x632C,   // 0x0030 (48) pixels
  0x632C, 0xBDD7, 0xBDD7, 0xFFFF, 0xFFFF, 0x8E3A, 0xFFFF, 0x8E3A, 0x8E3A, 0xFFFF, 0x632C, 0xBDD7, 0xFFFF, 0xFFFF, 0x8E3A, 0xFFFF,   // 0x0040 (64) pixels
  0xFFFF, 0xFFFF, 0xFFFF, 0x8E3A, 0xFFFF, 0xBDD7, 0xFFFF, 0x8E3A, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x8E3A, 0xFFFF,   // 0x0050 (80) pixels
  0xFFFF, 0x8E3A, 0x8E3A, 0x8E3A, 0x8E3A, 0x8E3A, 0x8E3A, 0x8E3A, 0x8E3A, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
};

uint16_t static n04[] = {
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xBDD7, 0xBDD7, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xBDD7, 0xBDD7, 0x632C,   // 0x0010 (16) pixels
  0x632C, 0xBDD7, 0x0000, 0x0000, 0x0000, 0x0000, 0xBDD7, 0x632C, 0x632C, 0x632C, 0x632C, 0x632C, 0xBDD7, 0x0000, 0xBDD7, 0xBDD7,   // 0x0020 (32) pixels
  0x632C, 0xFFFF, 0xFFFF, 0x632C, 0x632C, 0x632C, 0x632C, 0xBDD7, 0xBDD7, 0x632C, 0xFFFF, 0x8E3A, 0x8E3A, 0xFFFF, 0xFFFF, 0x632C,   // 0x0030 (48) pixels
  0x632C, 0xBDD7, 0xBDD7, 0xFFFF, 0xFFFF, 0x8E3A, 0xFFFF, 0x8E3A, 0x8E3A, 0xFFFF, 0x632C, 0xBDD7, 0xFFFF, 0xFFFF, 0x8E3A, 0xFFFF,   // 0x0040 (64) pixels
  0xFFFF, 0xFFFF, 0xFFFF, 0x8E3A, 0xFFFF, 0xBDD7, 0xFFFF, 0x8E3A, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x8E3A, 0xFFFF,   // 0x0050 (80) pixels
  0xFFFF, 0x8E3A, 0x8E3A, 0x8E3A, 0x8E3A, 0x8E3A, 0x8E3A, 0x8E3A, 0x8E3A, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
};

uint16_t static d09[] = {
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xBDD7, 0xBDD7, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xBDD7, 0xBDD7, 0x632C,   // 0x0010 (16) pixels
  0x632C, 0xBDD7, 0x0000, 0x0000, 0x0000, 0x0000, 0xBDD7, 0x632C, 0x632C, 0x632C, 0x632C, 0x632C, 0xBDD7, 0x0000, 0xBDD7, 0xBDD7,   // 0x0020 (32) pixels
  0x632C, 0x632C, 0x632C, 0x632C, 0x632C, 0x632C, 0x632C, 0xBDD7, 0xBDD7, 0x632C, 0x632C, 0x632C, 0x632C, 0x632C, 0x632C, 0x632C,   // 0x0030 (48) pixels
  0x632C, 0xBDD7, 0xBDD7, 0xBDD7, 0xBDD7, 0xBDD7, 0xBDD7, 0xBDD7, 0xBDD7, 0xBDD7, 0xBDD7, 0xBDD7, 0x0000, 0xFFFF, 0x0000, 0x0000,   // 0x0040 (64) pixels
  0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF,   // 0x0050 (80) pixels
  0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000,
};

uint16_t static n09[] = {
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xBDD7, 0xBDD7, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xBDD7, 0xBDD7, 0x632C,   // 0x0010 (16) pixels
  0x632C, 0xBDD7, 0x0000, 0x0000, 0x0000, 0x0000, 0xBDD7, 0x632C, 0x632C, 0x632C, 0x632C, 0x632C, 0xBDD7, 0x0000, 0xBDD7, 0xBDD7,   // 0x0020 (32) pixels
  0x632C, 0x632C, 0x632C, 0x632C, 0x632C, 0x632C, 0x632C, 0xBDD7, 0xBDD7, 0x632C, 0x632C, 0x632C, 0x632C, 0x632C, 0x632C, 0x632C,   // 0x0030 (48) pixels
  0x632C, 0xBDD7, 0xBDD7, 0xBDD7, 0xBDD7, 0xBDD7, 0xBDD7, 0xBDD7, 0xBDD7, 0xBDD7, 0xBDD7, 0xBDD7, 0x0000, 0xFFFF, 0x0000, 0x0000,   // 0x0040 (64) pixels
  0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF,   // 0x0050 (80) pixels
  0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000,
};

uint16_t static d10[] = {
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xBDD7, 0xBDD7, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xBDD7, 0xBDD7, 0x632C,   // 0x0010 (16) pixels
  0x632C, 0xBDD7, 0x0000, 0x0000, 0x0000, 0x0000, 0xBDD7, 0x632C, 0x632C, 0x632C, 0x632C, 0x632C, 0xBDD7, 0x0000, 0xBDD7, 0xBDD7,   // 0x0020 (32) pixels
  0x632C, 0x632C, 0x632C, 0x632C, 0x632C, 0x632C, 0x632C, 0xBDD7, 0xBDD7, 0x632C, 0x632C, 0x632C, 0x632C, 0x632C, 0x632C, 0x632C,   // 0x0030 (48) pixels
  0x632C, 0xBDD7, 0xBDD7, 0xBDD7, 0xBDD7, 0xBDD7, 0xBDD7, 0xBDD7, 0xBDD7, 0xBDD7, 0xBDD7, 0xBDD7, 0x0000, 0xFFFF, 0x0000, 0x0000,   // 0x0040 (64) pixels
  0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF,   // 0x0050 (80) pixels
  0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000,
};

uint16_t static n10[] = {
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xBDD7, 0xBDD7, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xBDD7, 0xBDD7, 0x632C,   // 0x0010 (16) pixels
  0x632C, 0xBDD7, 0x0000, 0x0000, 0x0000, 0x0000, 0xBDD7, 0x632C, 0x632C, 0x632C, 0x632C, 0x632C, 0xBDD7, 0x0000, 0xBDD7, 0xBDD7,   // 0x0020 (32) pixels
  0x632C, 0x632C, 0x632C, 0x632C, 0x632C, 0x632C, 0x632C, 0xBDD7, 0xBDD7, 0x632C, 0x632C, 0x632C, 0x632C, 0x632C, 0x632C, 0x632C,   // 0x0030 (48) pixels
  0x632C, 0xBDD7, 0xBDD7, 0xBDD7, 0xBDD7, 0xBDD7, 0xBDD7, 0xBDD7, 0xBDD7, 0xBDD7, 0xBDD7, 0xBDD7, 0x0000, 0xFFFF, 0x0000, 0x0000,   // 0x0040 (64) pixels
  0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF,   // 0x0050 (80) pixels
  0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000,
};

uint16_t static d11[] = {
  0x0000, 0x0000, 0xFFC0, 0xFFC0, 0xFFC0, 0xFFC0, 0xFFC0, 0xFFC0, 0xFFC0, 0xFFC0, 0x0000, 0x0000, 0xFFC0, 0x0000, 0x0000, 0x0000,   // 0x0010 (16) pixels
  0x0000, 0x0000, 0x0000, 0xFFC0, 0x0000, 0xFFC0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFC0, 0x0000, 0xFFC0, 0x0000,   // 0x0020 (32) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFC0, 0x0000, 0x0000, 0xFFC0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFC0, 0xFFC0,   // 0x0030 (48) pixels
  0xFFC0, 0xFFC0, 0xFFC0, 0xFFC0, 0xFFC0, 0xFFC0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFC0, 0x0000, 0x0000, 0x0000, 0xFFC0,   // 0x0040 (64) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0xFFC0, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFC0, 0x0000, 0x0000, 0x0000, 0xFFC0, 0x0000, 0x0000,   // 0x0050 (80) pixels
  0x0000, 0x0000, 0x0000, 0xFFC0, 0x0000, 0x0000, 0xFFC0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFC0, 0xFFC0, 0xFFC0,
};

uint16_t static n11[] = {
  0x0000, 0x0000, 0xFFC0, 0xFFC0, 0xFFC0, 0xFFC0, 0xFFC0, 0xFFC0, 0xFFC0, 0xFFC0, 0x0000, 0x0000, 0xFFC0, 0x0000, 0x0000, 0x0000,   // 0x0010 (16) pixels
  0x0000, 0x0000, 0x0000, 0xFFC0, 0x0000, 0xFFC0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFC0, 0x0000, 0xFFC0, 0x0000,   // 0x0020 (32) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFC0, 0x0000, 0x0000, 0xFFC0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFC0, 0xFFC0,   // 0x0030 (48) pixels
  0xFFC0, 0xFFC0, 0xFFC0, 0xFFC0, 0xFFC0, 0xFFC0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFC0, 0x0000, 0x0000, 0x0000, 0xFFC0,   // 0x0040 (64) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0xFFC0, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFC0, 0x0000, 0x0000, 0x0000, 0xFFC0, 0x0000, 0x0000,   // 0x0050 (80) pixels
  0x0000, 0x0000, 0x0000, 0xFFC0, 0x0000, 0x0000, 0xFFC0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFC0, 0xFFC0, 0xFFC0,
};

uint16_t static d13[] = {
  0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xBDD7, 0x7BEF, 0xFFFF, 0x0000, 0x0000,   // 0x0010 (16) pixels
  0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x7BEF, 0x632C, 0xFFFF, 0x0000, 0xFFFF, 0xBDD7, 0x7BEF, 0xFFFF, 0x0000, 0x0000, 0xFFFF,   // 0x0020 (32) pixels
  0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x7BEF, 0x632C, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF,   // 0x0030 (48) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xBDD7, 0x7BEF,   // 0x0040 (64) pixels
  0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x7BEF, 0x632C, 0xFFFF, 0x0000, 0xFFFF, 0xBDD7, 0x7BEF, 0xFFFF,   // 0x0050 (80) pixels
  0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x7BEF, 0x632C, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
};

uint16_t static n13[] = {
  0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xBDD7, 0x7BEF, 0xFFFF, 0x0000, 0x0000,   // 0x0010 (16) pixels
  0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x7BEF, 0x632C, 0xFFFF, 0x0000, 0xFFFF, 0xBDD7, 0x7BEF, 0xFFFF, 0x0000, 0x0000, 0xFFFF,   // 0x0020 (32) pixels
  0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x7BEF, 0x632C, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF,   // 0x0030 (48) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xBDD7, 0x7BEF,   // 0x0040 (64) pixels
  0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x7BEF, 0x632C, 0xFFFF, 0x0000, 0xFFFF, 0xBDD7, 0x7BEF, 0xFFFF,   // 0x0050 (80) pixels
  0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x7BEF, 0x632C, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
};

uint16_t static d50[] = {
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xBDD7, 0xBDD7, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xBDD7, 0xBDD7, 0x632C,   // 0x0010 (16) pixels
  0x632C, 0xBDD7, 0x0000, 0x0000, 0x0000, 0x0000, 0xBDD7, 0x632C, 0x632C, 0x632C, 0x632C, 0x632C, 0xBDD7, 0x0000, 0xBDD7, 0xBDD7,   // 0x0020 (32) pixels
  0x632C, 0x632C, 0x632C, 0x632C, 0x632C, 0x632C, 0x632C, 0xBDD7, 0xBDD7, 0x632C, 0x632C, 0x632C, 0x632C, 0x632C, 0x632C, 0x632C,   // 0x0030 (48) pixels
  0x632C, 0xBDD7, 0xBDD7, 0xBDD7, 0xBDD7, 0xBDD7, 0xBDD7, 0xBDD7, 0xBDD7, 0xBDD7, 0xBDD7, 0xBDD7, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0040 (64) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x632C, 0x632C, 0x632C, 0x632C, 0x632C, 0x632C, 0x632C, 0x0000, 0x0000,   // 0x0050 (80) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x632C, 0x632C, 0x632C, 0x632C, 0x632C,
};

uint16_t static n50[] = {
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xBDD7, 0xBDD7, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xBDD7, 0xBDD7, 0x632C,   // 0x0010 (16) pixels
  0x632C, 0xBDD7, 0x0000, 0x0000, 0x0000, 0x0000, 0xBDD7, 0x632C, 0x632C, 0x632C, 0x632C, 0x632C, 0xBDD7, 0x0000, 0xBDD7, 0xBDD7,   // 0x0020 (32) pixels
  0x632C, 0x632C, 0x632C, 0x632C, 0x632C, 0x632C, 0x632C, 0xBDD7, 0xBDD7, 0x632C, 0x632C, 0x632C, 0x632C, 0x632C, 0x632C, 0x632C,   // 0x0030 (48) pixels
  0x632C, 0xBDD7, 0xBDD7, 0xBDD7, 0xBDD7, 0xBDD7, 0xBDD7, 0xBDD7, 0xBDD7, 0xBDD7, 0xBDD7, 0xBDD7, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0040 (64) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x632C, 0x632C, 0x632C, 0x632C, 0x632C, 0x632C, 0x632C, 0x0000, 0x0000,   // 0x0050 (80) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x632C, 0x632C, 0x632C, 0x632C, 0x632C,
};

PxMATRIX display(64, 32, P_LAT, P_OE, P_A, P_B, P_C, P_D);

const char* mdnsName = "promatrix";

WiFiClient client;
WebSocketsServer webSocket = WebSocketsServer(81);

//Web drawer
String drawnX = "";
String drawnY = "";
String drawnColour = "";
String answer = "";

//Weather display
const char server[] = "api.openweathermap.org";
String apiKey = ""; //put your api key here
String latCity = "52.406921";
String lonCity = "16.92993";
String id = "3088171";
String city;
float tempNow, tempMax, tempMin;
int tempNowRounded, tempMaxRounded, tempMinRounded;
String countryCode, descriptionWeather, idIcon;
String text;
int jsonend = 0;
boolean startJson = false;
unsigned long lastConnectionTime = 10 * 60 * 1000;     // last time you connected to the server, in milliseconds
const unsigned long postInterval = 10 * 60 * 1000;  // posting interval of 10 minutes  (10L * 1000L; 10 seconds delay for testing)

void startWiFi() {
  text.reserve(JSON_BUFF_DIMENSION);
  Serial.println();
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(STASSID);
  WiFi.mode(WIFI_STA);
  WiFi.begin(STASSID, STAPSK);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

void startOTA() {
  /*-----START : OTA Setup-----*/
  // No authentication by default
  //ArduinoOTA.setPassword("ESP");
  ArduinoOTA.onStart([]() {
    String type;
    if (ArduinoOTA.getCommand() == U_FLASH) {
      type = "sketch";
    } else { // U_SPIFFS
      type = "filesystem";
    }

    // NOTE: if updating SPIFFS this would be the place to unmount SPIFFS using SPIFFS.end()
    Serial.println("Start updating " + type);
  });
  ArduinoOTA.onEnd([]() {
    Serial.println("\nEnd");
  });
  ArduinoOTA.onProgress([](unsigned int progress, unsigned int total) {
    Serial.printf("Progress: %u%%\r", (progress / (total / 100)));
  });
  ArduinoOTA.onError([](ota_error_t error) {
    Serial.printf("Error[%u]: ", error);
    if (error == OTA_AUTH_ERROR) {
      Serial.println("Auth Failed");
    } else if (error == OTA_BEGIN_ERROR) {
      Serial.println("Begin Failed");
    } else if (error == OTA_CONNECT_ERROR) {
      Serial.println("Connect Failed");
    } else if (error == OTA_RECEIVE_ERROR) {
      Serial.println("Receive Failed");
    } else if (error == OTA_END_ERROR) {
      Serial.println("End Failed");
    }
  });
  ArduinoOTA.begin();
  Serial.println("OTA Ready");
  /*-----END : OTA Setup-----*/
}

void makehttpRequest() {
  // close any connection before send a new request to allow client make connection to server
  client.stop();

  // if there's a successful connection:
  if (client.connect(server, 80)) {
    // Serial.println("connecting...");
    // send the HTTP PUT request:
    client.println("GET /data/2.5/weather?id=" + id + "&APPID=" + apiKey + "&mode=json&units=metric&cnt=2 HTTP/1.1");
    client.println("Host: api.openweathermap.org");
    //client.println("User-Agent: ArduinoWiFi/1.1");
    client.println("Connection: close");
    client.println();

    unsigned long timeout = millis();
    while (client.available() == 0) {
      if (millis() - timeout > 5000) {
        Serial.println(">>> Client Timeout !");
        client.stop();
        return;
      }
    }

    char c = 0;
    while (client.available()) {
      c = client.read();
      // since json contains equal number of open and close curly brackets, this means we can determine when a json is completely received  by counting
      // the open and close occurences,
      //Serial.print(c);
      if (c == '{') {
        startJson = true;         // set startJson true to indicate json message has started
        jsonend++;
      }
      if (c == '}') {
        jsonend--;
      }
      if (startJson == true) {
        text += c;
      }
      // if jsonend = 0 then we have have received equal number of curly braces
      if (jsonend == 0 && startJson == true) {
        parseJson(text.c_str());  // parse c string text in parseJson function
        text = "";                // clear text string for the next time
        startJson = false;        // set startJson to false to indicate that a new message has not yet started
      }
    }
  }
  else {
    // if no connction was made:
    Serial.println("connection failed");
    return;
  }
}

//to parse json data recieved from OWM
void parseJson(const char * jsonString) {
  //StaticJsonBuffer<4000> jsonBuffer;
  const size_t bufferSize = 2 * JSON_ARRAY_SIZE(1) + JSON_ARRAY_SIZE(2) + 4 * JSON_OBJECT_SIZE(1) + 3 * JSON_OBJECT_SIZE(2) + 3 * JSON_OBJECT_SIZE(4) + JSON_OBJECT_SIZE(5) + 2 * JSON_OBJECT_SIZE(7) + 2 * JSON_OBJECT_SIZE(8) + 720;
  DynamicJsonBuffer jsonBuffer(bufferSize);

  // FIND FIELDS IN JSON TREE
  JsonObject& root = jsonBuffer.parseObject(jsonString);
  if (!root.success()) {
    Serial.println("parseObject() failed");
    return;
  }

  city="";
  idIcon="";
  descriptionWeather="";
  countryCode="";
  city = root["name"].asString();
  tempNow = root["main"]["temp"];
  tempMax = root["main"]["temp_max"];
  tempMin = root["main"]["temp_min"];
  countryCode = root["sys"]["country"].asString();
  descriptionWeather = root["weather"][0]["main"].asString();
  idIcon = root["weather"][0]["icon"].asString();
  tempNowRounded = round(tempNow);
  tempMaxRounded = round(tempMax);
  tempMinRounded = round(tempMin);
}

void drawWeather()
{
  if (idIcon == "01d")
  {
    drawImage(d01);
  }
  if (idIcon == "01n")
  {
    drawImage(n01);
  }
  if (idIcon == "02d")
  {
    drawImage(d02);
  }
  if (idIcon == "02n")
  {
    drawImage(n02);
  }
  if (idIcon == "03d")
  {
    drawImage(d03);
  }
  if (idIcon == "03n")
  {
    drawImage(n03);
  }
  if (idIcon == "04d")
  {
    drawImage(d04);
  }
  if (idIcon == "04n")
  {
    drawImage(n04);
  }
  if (idIcon == "09d")
  {
    drawImage(d09);
  }
  if (idIcon == "09n")
  {
    drawImage(n09);
  }
  if (idIcon == "10d")
  {
    drawImage(d10);
  }
  if (idIcon == "10n")
  {
    drawImage(n10);
  }
  if (idIcon == "11d")
  {
    drawImage(d11);
  }
  if (idIcon == "11n")
  {
    drawImage(n11);
  }
  if (idIcon == "13d")
  {
    drawImage(d13);
  }
  if (idIcon == "13n")
  {
    drawImage(n13);
  }
  if (idIcon == "50d")
  {
    drawImage(d50);
  }
  if (idIcon == "50n")
  {
    drawImage(n50);
  }
  display.setTextSize(1);
  display.setCursor(12, 2);
  display.print(city);
  display.setCursor(47, 3);
  display.print(",");
  display.setCursor(52, 2);
  display.setTextColor(0xF800);
  display.print(countryCode);
  display.setTextColor(0xFFFF);
  display.setCursor(2, 14);
  display.print(tempNowRounded);
  display.drawCircle(14, 12, 1, 0xFFFF);
  display.setCursor(15, 14);
  display.print("-<");
  display.setCursor(27, 14);
  display.setTextColor(0x069F);
  display.drawCircle(38, 12, 1, 0x069F);
  display.print(tempMinRounded);
  display.setCursor(39, 16);
  display.setTextColor(0xFFFF);
  display.print("~");
  display.setCursor(45, 14);
  display.setTextColor(0xFC40);
  display.drawCircle(56, 12, 1, 0xFC40);
  display.print(tempMaxRounded);
  display.setCursor(57, 14);
  display.setTextColor(0xFFFF);
  display.print(">");
  display.setCursor(12, 23);
  display.print(descriptionWeather);
}

void drawImage(uint16_t *frame)
{
  int counter = 0;
  for (int yy = 0; yy < 10; yy++)
  {
    for (int xx = 0; xx < 10; xx++)
    {
      display.drawPixel(xx, yy, frame[counter]);
      counter++;
    }
  }
  delay(100);
}

void drawReceived(uint8_t num, String sReceived)
{
  int x, y;
  uint16_t colour;
  String colourString;
  String answerDebug = "";
  int commas[4] = { -1, -1, -1, -1};
  int commaIndex = 0;
  int command;

  for ( int i = 0; i < ELEMENTS(commas); i++ )
  {
    commas[i] = -1;
  }

  for (int b = 0; b < sReceived.length(); b++)
  {
    if (sReceived[b] == ',')
    {
      commas[commaIndex++] = b;
    }
  }
  int commandSeperator = sReceived.indexOf(":");
  command = sReceived.substring(0, commandSeperator).toInt();
  x = sReceived.substring(commandSeperator + 1, commas[0]).toInt();
  y = sReceived.substring(commas[0] + 1, commas[1]).toInt();
  colourString = sReceived.substring(commas[1] + 1);
  colour = strtol(colourString.c_str(), NULL, 0);
  answerDebug = "Drawing pixel with properties x : ";
  answerDebug += x;
  answerDebug += ", y : ";
  answerDebug += y;
  answerDebug += ", color : ";
  answerDebug += colourString;
  answer += "~";
  answer += x;
  answer += ",";
  answer += y;
  answer += ";";
  answer += colour;
  answer += "!";
  webSocket.sendTXT(num, answerDebug);
  display.drawPixel(x , y, colour);
  Serial.println(colourString);
  Serial.println(colour);

}

void clearDisplay() {
  answer = "";
  drawnX = "";
  drawnY = "";
  drawnColour = "";
  for (int i = 0; i < 64; i++) {
    for (int j = 0; j < 32; j++) {
      display.drawPixel(i , j, 0x0000);
    }
  }
}

void retrieveData(uint8_t num) {
  webSocket.sendTXT(num, answer);
}

void startWebSocket() {
  webSocket.begin();
  webSocket.onEvent(webSocketEvent);
  Serial.println("WebSocket server started.");
}

void webSocketEvent(uint8_t num, WStype_t type, uint8_t * payload, size_t length) {
  {
    String inPayload;
    int x;
    int y;
    int w;
    int h;
    uint16_t colour;
    int commaCount = 0;

    switch (type) {
      case WStype_DISCONNECTED:
        Serial.printf("[%u] Disconnected!\n", num);
        break;

      case WStype_CONNECTED:
        {
          IPAddress ip = webSocket.remoteIP(num);
          Serial.printf("[%u] Connected from %d.%d.%d.%d url: %s\n", num, ip[0], ip[1], ip[2], ip[3], payload);
          // send message to client
          webSocket.sendTXT(num, "Connected");
        }
        break;

      case WStype_TEXT:
        inPayload = String((char *) payload);

        if (inPayload == "CLEAR") {
          clearDisplay();
        }

        else if (inPayload == "RETRIEVE")
        {
          retrieveData(num);
        }

        else {
          drawReceived(num, inPayload);
        }
        // send message to client
        // webSocket.sendTXT(num, "message here");

        // send data to all connected clients
        // webSocket.broadcastTXT("message here");
        break;

      case WStype_BIN:
        Serial.printf("[%u] get binary length: %u\n", num, length);
        hexdump(payload, length);

        // send message to client
        // webSocket.sendBIN(num, payload, length);
        break;
    }
  }
}

void display_updater()
{
  //display.displayTestPattern(70);
  //display.displayTestPixel(70);
  display.display(70);
}

void setup() {
  // put your setup code here, to run once:
  Serial.begin(115200);
  Serial.println("Booting");
  startWiFi();
  startOTA();
  startWebSocket();
  display.begin(16);
  display_ticker.attach(0.003, display_updater);
  display.clearDisplay();
  display.setBrightness(30);
}

void loop() {
  ArduinoOTA.handle();
  webSocket.loop();
  if (millis() - lastConnectionTime > postInterval) {
    // note the time that the connection was made:
    lastConnectionTime = millis();
    display.fillScreen(0x0000);
    makehttpRequest();
    drawWeather();
  }
}
